# MP3 Player - Learn about youtube-dl after mp3 player is done - pip install pygame and mutagen
from tkinter import *
import pygame
from tkinter import filedialog
import time
from mutagen.mp3 import MP3

root = Tk()
root.title("Chloe's MP3 Player")
root.geometry('500x300')

# Initialize pygame mixer
pygame.mixer.init()

# Grab song length time info
def play_time():
    # Grab current song elapsed time 
    current_time = pygame.mixer.music.get_pos() / 1000

    # Convert to time format
    converted_current_time = time.strftime('%M:%S', time.gmtime(current_time))

    # Get currently playing song
    current_song = song_box.curselection()
    # Grab song title from playlist
    song = song_box.get(current_song)
    # Add directory strucutre and mp3 to song title
    song = f"C:/Users/Student/Desktop/code-cs-as chloe/Songs/{song}.mp3"
    # Load song with mutagen
    song_mut = MP3(song)
    # Get song length
    song_length = song_mut.info.Length
    # Convert time format
    converted_song_length = time.strftime('%M:%S', time.gmtime(song_length))

    # Output time to status bar
    status_bar.config(text=f'Time Elapsed: {converted_current_time} of {converted_song_length}')

    # Update time
    status_bar.after(1000, play_time)


# Add song function
def add_song():
    song = filedialog.askopenfilename(initialdir='audio/', title='Choose A Song', filetypes=(('mp3 Files', '*.mp3'), ))
    
    # Strip out the directory onfo and .mp3 extension from the song name
    song = song.replace("C:/Users/Student/Desktop/code-cs-as chloe/Songs/", "")
    song = song.replace(".mp3", "")
    
    # Add song to listbox
    song_box.insert(END, song)


#Add many songs to playlist
def add_many_songs():
    songs = filedialog.askopenfilenames(initialdir='audio/', title='Choose A Song', filetypes=(('mp3 Files', '*.mp3'), ))

    # Loop through song list and replce directory info and mp3
    for song in songs:
        song = song.replace("C:/Users/Student/Desktop/code-cs-as chloe/Songs/", "")
        song = song.replace(".mp3", "")
        # Insert into playlist
        song_box.insert(END, song)


# Play selected song
def play():
    song = song_box.get(ACTIVE)
    song = f"C:/Users/Student/Desktop/code-cs-as chloe/Songs/{song}.mp3"

    pygame.mixer.music.load(song)
    pygame.mixer.music.play(loops=0)

    # Call play_time function to get song length
    play_time()


# Stop playing current song
def stop():
    pygame.mixer.music.stop()
    song_box.selection_clear(ACTIVE)


# Play the next song
def next_song():
    # Get the current song tuple number
    next_one = song_box.curselection()
    # Add one to the current song number
    next_one = next_one[0] + 1
    # Grab song title from playlist
    song = song_box.get(next_one)
    # Add directory strucutre and mp3 to song title
    song = f"C:/Users/Student/Desktop/code-cs-as chloe/Songs/{song}.mp3"
    # Load and play the next song
    pygame.mixer.music.load(song)
    pygame.mixer.music.play(loops=0)
    
    # Move active bar in playlist listbox
    song_box.select_clear(0, END)

    # Activate new song bar
    song_box.activate(next_one)

    # Set active bar to next song
    song_box.selection_set(next_one, last=None)


# Play previous song in playlist
def previous_song():
    # Get the current song tuple number
    next_one = song_box.curselection()
    # Add one to the current song number
    next_one = next_one[0] - 1
    # Grab song title from playlist
    song = song_box.get(next_one)
    # Add directory strucutre and mp3 to song title
    song = f"C:/Users/Student/Desktop/code-cs-as chloe/Songs/{song}.mp3"
    # Load and play the next song
    pygame.mixer.music.load(song)
    pygame.mixer.music.play(loops=0)
    
    # Move active bar in playlist listbox
    song_box.select_clear(0, END)

    # Activate new song bar
    song_box.activate(next_one)

    # Set active bar to next song
    song_box.selection_set(next_one, last=None)


# Delete a song from playlist
def delete_song():
    # Delete currently selected song
    song_box.delete(ANCHOR)
    # Stop music if playing
    pygame.mixer.music.stop()


# Delete all songs from playlist
def delete_all_songs():
    # Delete all songs
    song_box.delete(0, END)
    # Stop music if playing
    pygame.mixer.music.stop()


# Create global pause variable
global paused
paused = False

# Pause and unpause the current song
def pause(is_paused):
    global paused
    paused = is_paused

    if paused:
        # Unpause
        pygame.mixer.music.unpause()
        paused = False
    else:
        # Pause
        pygame.mixer.music.pause()
        paused = True
  

# Create Playlist Box
song_box = Listbox(root, bg="Black", fg="green", width=60, selectbackground="gray", selectforeground="black")
song_box.pack(pady=20)

# Define Playlist Control Buttons Images
back_btn_img = PhotoImage(file='Images/backwards.png')
forward_btn_img = PhotoImage(file='Images/forward.png')
play_btn_img = PhotoImage(file='Images/play.png')
pause_btn_img = PhotoImage(file='Images/pause.png')
stop_btn_img = PhotoImage(file='Images/stop.png')

# Create PLayer Control Frame\
controls_frame = Frame(root)
controls_frame.pack()

# Create Player Control Buttons 
back_button = Button(controls_frame, image=back_btn_img, borderwidth=0, command=previous_song)
forward_button = Button(controls_frame, image=forward_btn_img, borderwidth=0, command=next_song)
play_button = Button(controls_frame, image=play_btn_img, borderwidth=0, command=play)
pause_button = Button(controls_frame, image=pause_btn_img, borderwidth=0, command=lambda: pause(paused))
stop_button = Button(controls_frame, image=stop_btn_img, borderwidth=0, command=stop)

back_button.grid(row=0, column=0, padx=10)
forward_button.grid(row=0, column=1, padx=10)
play_button.grid(row=0, column=2, padx=10)
pause_button.grid(row=0, column=3, padx=10)
stop_button.grid(row=0, column=4, padx=10)

# Create menu
my_menu = Menu(root)
root.config(menu=my_menu)

# Add song menu
add_song_menu = Menu(my_menu)
my_menu.add_cascade(label='Add Songs', menu=add_song_menu)
add_song_menu.add_command(label='Add song', command=add_song)
# Add Many Songs to Playlist
add_song_menu.add_command(label='Add many songs', command=add_many_songs)

# Create delete song menu
remove_song_menu = Menu(my_menu)
my_menu.add_cascade(label="Remove songs", menu=remove_song_menu)
remove_song_menu.add_command(label='Delete song', command=delete_song)
remove_song_menu.add_command(label='Delete all songs', command=delete_all_songs)

# Create status bar
status_bar = Label(root, text='',bd=1, relief=GROOVE, anchor=E)
status_bar.pack(fill=X, side=BOTTOM, ipady=2)

root.mainloop()
